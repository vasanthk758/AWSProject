{
    "Description": "Creates the Eco System for Ideal Applicaton Stack to support scalable Application Requirement",
    "AWSTemplateFormatVersion": "2010-09-09",
    "Parameters": {
        "ApplicationName": {
            "Description": "Select a Name for VPC",
            "Type": "String",
            "Default":"my-vpc"
        },
        "VpcCIDR": {
            "Description": "CIDR for the VPC",
            "Type": "String",
            "Default": "10.192.0.0/16"
        },
        "PublicSubnet1CIDR": {
            "Description": "CIDR for Public Subnet in AZ1",
            "Type": "String",
            "Default": "10.192.10.0/24"
        },
        "AZs": {
            "Type": "List<AWS::EC2::AvailabilityZone::Name>",
            "Default": "us-east-1a,us-east-1b",
            "Description": "Select Two AZs, where the Public and Private Subnets will be deployed."
            },
        "PublicSubnet2CIDR": {
            "Description": "CIDR for Public Subnet in AZ2",
            "Type": "String",
            "Default": "10.192.11.0/24"
        },
        "PrivateSubnet1CIDR": {
            "Description": "CIDR for private Subnet in AZ1",
            "Type": "String",
            "Default": "10.192.20.0/24"
        },
        "PrivateSubnet2CIDR": {
            "Description": "CIDR for private Subnet in AZ2",
            "Type": "String",
            "Default": "10.192.21.0/24"
        },
        "LoadBalancerName": {
            "Description": "Select Name for Load Balancer",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "32",
            "ConstraintDescription": "Must contain only alphanumeric characters or hyphens, and cannot begin or end with a hyphen. Must have a maximum of 32 characters."
        },
        "ServiceRoleName": {
            "Description": "The name of the service role.",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "64",
            "ConstraintDescription": "Must contain only alphanumeric characters or hyphens, and cannot begin or end with a hyphen."
        },
        "InstanceCount": {
            "Description": "Number of Amazon EC2 instances in an autoscaling group.",
            "Type": "Number",
            "Default": "2",
            "ConstraintDescription": "Must be a number between 2 and 5.",
            "MinValue": "2",
            "MaxValue": "5"
        },
        "KeyPairName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
        }
    },
    "Mappings": {
        "RegionOS2AMI": {
            "us-east-1": {
                "Linux": "ami-b73b63a0"
            },
            "us-west-2": {
                "Linux": "ami-5ec1673e"
            },
            "eu-west-1": {
                "Linux": "ami-9398d3e0"
            },
            "ap-southeast-2": {
                "Linux": "ami-db704cb8"
            },
            "ap-southeast-1": {
                "Linux": "ami-b953f2da"
            },
            "ap-south-1": {
                "Linux": "ami-34b4c05b"
            },
            "cn-north-1": {
                "Linux": "ami-8e6aa0e3"
            },
            "cn-northwest-1": {
                "Linux": "ami-9e606bfc"
            },
            "us-east-2": {
                "Linux": "ami-58277d3d"
            },
            "us-west-1": {
                "Linux": "ami-23e8a343"
            },
            "eu-central-1": {
                "Linux": "ami-f9619996"
            },
            "ap-northeast-1": {
                "Linux": "ami-0c11b26d"
            },
            "sa-east-1": {
                "Linux": "ami-97831ffb"
            },
            "eu-west-2": {
                "Linux": "ami-d6cbc1b2"
            },
            "eu-west-3": {
                "Linux": "ami-17c6736a"
            },
            "ca-central-1": {
                "Linux": "ami-b48b39d0"
            },
            "ap-northeast-2": {
                "Linux": "ami-983ce8f6"
            },
            "ap-northeast-3": {
                "Linux": "ami-e8e5e895"
            },
            "us-gov-west-1": {
                "Linux": "ami-700a8f11"
            },
            "us-iso-east-1": {
                "Linux": "ami-74c33f63"
            }
        }
    },
    "Resources": {
        "WaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "WaitCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "Properties": {
                "Count": {
                    "Ref": "InstanceCount"
                },
                "Handle": {
                    "Ref": "WaitHandle"
                },
                "Timeout": "1800"
            }
        },
        "CodeDeployTrustRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "1",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "codedeploy.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "RoleName": {
                    "Ref": "ServiceRoleName"
                }
            }
        },
        "CodeDeployRolePolicies": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "CodeDeployPolicy",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Resource": [
                                "*"
                            ],
                            "Action": [
                                "ec2:Describe*",
                                "ec2:TerminateInstances"
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Resource": [
                                "*"
                            ],
                            "Action": [
                                "autoscaling:*"
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Resource": [
                                "*"
                            ],
                            "Action": [
                                "elasticloadbalancing:DescribeLoadBalancers",
                                "elasticloadbalancing:DescribeInstanceHealth",
                                "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Resource": [
                                "*"
                            ],
                            "Action": [
                                "Tag:getResources",
                                "Tag:getTags",
                                "Tag:getTagsForResource",
                                "Tag:getTagsForResourceList"
                            ]
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "CodeDeployTrustRole"
                    }
                ]
            }
        },
        "InstanceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/"
            }
        },
        "InstanceRolePolicies": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "InstanceRole",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "autoscaling:Describe*",
                                "cloudformation:Describe*",
                                "cloudformation:GetTemplate",
                                "s3:Get*"
                            ],
                            "Resource": "*"
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "InstanceRole"
                    }
                ]
            }
        },
        "InstanceRoleInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "InstanceRole"
                    }
                ]
            }
        },
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Ref": "VpcCIDR"
                },
                "EnableDnsSupport": true,
                "EnableDnsHostnames": true,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "ApplicationName"
                        }
                    }
                ]
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "ApplicationName"
                        }
                    }
                ]
            }
        },
        "InternetGatewayAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                },
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PublicSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "AvailabilityZone": {
                     "Fn::Select" : [
                          "0", 
                          {"Ref": "AZs"}
                          ] 
                },
                "CidrBlock": {
                    "Ref": "PublicSubnet1CIDR"
                },
                "MapPublicIpOnLaunch": true,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${ApplicationName} Public Subnet (AZ1)"
                        }
                    }
                ]
            }
        },
        "PublicSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "AvailabilityZone": {
                    "Fn::Select" : [
                         "1", 
                         {"Ref": "AZs"}
                         ] 
               },
                "CidrBlock": {
                    "Ref": "PublicSubnet2CIDR"
                },
                "MapPublicIpOnLaunch": true,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${ApplicationName} Public Subnet (AZ2)"
                        }
                    }
                ]
            }
        },
        "PrivateSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "AvailabilityZone": {
                    "Fn::Select" : [
                         "0", 
                         {"Ref": "AZs"}
                         ] 
               },
                "CidrBlock": {
                    "Ref": "PrivateSubnet1CIDR"
                },
                "MapPublicIpOnLaunch": false,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${ApplicationName} Private Subnet (AZ1)"
                        }
                    }
                ]
            }
        },
        "PrivateSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "AvailabilityZone": {
                    "Fn::Select" : [
                         "1", 
                         {"Ref": "AZs"}
                         ] 
               },
                "CidrBlock": {
                    "Ref": "PrivateSubnet2CIDR"
                },
                "MapPublicIpOnLaunch": false,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${ApplicationName} Private Subnet (AZ2)"
                        }
                    }
                ]
            }
        },
        "NatGateway1EIP": {
            "Type": "AWS::EC2::EIP",
            "DependsOn": "InternetGatewayAttachment",
            "Properties": {
                "Domain": "vpc"
            }
        },
        "NatGateway2EIP": {
            "Type": "AWS::EC2::EIP",
            "DependsOn": "InternetGatewayAttachment",
            "Properties": {
                "Domain": "vpc"
            }
        },
        "NatGateway1": {
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "NatGateway1EIP",
                        "AllocationId"
                    ]
                },
                "SubnetId": {
                    "Ref": "PublicSubnet1"
                }
            }
        },
        "NatGateway2": {
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "NatGateway2EIP",
                        "AllocationId"
                    ]
                },
                "SubnetId": {
                    "Ref": "PublicSubnet2"
                }
            }
        },
        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${ApplicationName} Public Routes"
                        }
                    }
                ]
            }
        },
        "DefaultPublicRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "InternetGatewayAttachment",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PublicSubnet1RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "PublicSubnet1"
                }
            }
        },
        "PublicSubnet2RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "PublicSubnet2"
                }
            }
        },
        "PrivateRouteTable1": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${ApplicationName} Private Routes (AZ1)"
                        }
                    }
                ]
            }
        },
        "DefaultPrivateRoute1": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTable1"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "NatGateway1"
                }
            }
        },
        "PrivateSubnet1RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTable1"
                },
                "SubnetId": {
                    "Ref": "PrivateSubnet1"
                }
            }
        },
        "PrivateRouteTable2": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${ApplicationName} Private Routes (AZ2)"
                        }
                    }
                ]
            }
        },
        "DefaultPrivateRoute2": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTable2"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "NatGateway2"
                }
            }
        },
        "InternalSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Internal - Allow HTTP and SSH traffic Host attached",
                "VpcId" : {"Ref" : "VPC"},
                "SecurityGroupIngress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : "22",
                        "ToPort" : "22",
                        "CidrIp" : {
                            "Ref": "PublicSubnet1CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : "80",
                        "ToPort" : "80",
                        "CidrIp" : {
                            "Ref": "PublicSubnet1CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : "22",
                        "ToPort" : "22",
                        "CidrIp" : {
                            "Ref": "PublicSubnet2CIDR"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : "80",
                        "ToPort" : "80",
                        "CidrIp" : {
                            "Ref": "PublicSubnet2CIDR"
                        }
                    },
                    {   "IpProtocol" : "icmp",
                        "FromPort" : 8,
                        "ToPort" : -1,
                        "CidrIp" : "0.0.0.0/0"
                    }
                ]
            }
        },
        "DMZSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription" : "Public - Allow HTTP and SSH traffic Host attached",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {   "IpProtocol" : "icmp",
                        "FromPort" : 8,
                        "ToPort" : -1,
                        "CidrIp" : "0.0.0.0/0"
                    }
                ]
            }
        },
        "ClassicLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "LoadBalancerName": {
                    "Ref": "LoadBalancerName"
                },
                "Subnets": [
                    {
                        "Ref": "PublicSubnet1"
                    },
                    {
                        "Ref": "PublicSubnet2"
                    }

                ],
                "Listeners": [
                    {
                        "LoadBalancerPort": "80",
                        "InstancePort": "80",
                        "Protocol": "HTTP"
                    }
                ],
                "HealthCheck": {
                    "Target": "HTTP:80/",
                    "HealthyThreshold": "2",
                    "UnhealthyThreshold": "5",
                    "Interval": "10",
                    "Timeout": "5"
                },
                "SecurityGroups": [
                    {
                        "Ref": "DMZSecurityGroup"
                    }
                ]
            }
        },
        "BlueGreenLaunchConfiguration": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "IamInstanceProfile": {
                    "Ref": "InstanceRoleInstanceProfile"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionOS2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        "Linux"
                    ]
                },
                "InstanceType": "t2.micro",
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "SecurityGroups": [
                    {
                        "Ref": "InternalSecurityGroup"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -ex\n",
                                "yum install -y aws-cfn-bootstrap\n",
                                "yum install -y ruby\n",
                                "yum install -y aws-cli\n",
                                "# Helper function.\n",
                                "function error_exit\n",
                                "{\n",
                                "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '",
                                {
                                    "Ref": "WaitHandle"
                                },
                                "'\n",
                                "  exit 1\n",
                                "}\n",
                                "# Install the AWS CodeDeploy Agent.\n",
                                "cd /home/ec2-user/\n",
                                "aws configure set default.s3.signature_version s3v4 || error_exit 'Failed to set aws cli signature to version 4'\n",
                                "aws s3 cp 's3://aws-codedeploy-us-east-1/latest/codedeploy-agent.noarch.rpm' . --region us-east-1 || error_exit 'Failed to download AWS CodeDeploy Agent.'\n",
                                "yum -y install codedeploy-agent.noarch.rpm || error_exit 'Failed to install AWS CodeDeploy Agent.' \n",
                                "# All is well, so signal success.\n",
                                "/opt/aws/bin/cfn-signal -e 0 -r \"AWS CodeDeploy Agent setup complete.\" '",
                                {
                                    "Ref": "WaitHandle"
                                },
                                "'\n"
                            ]
                        ]
                    }
                }
            }
        },
        "BlueGreenAutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "LaunchConfigurationName": {
                    "Ref": "BlueGreenLaunchConfiguration"
                },
                "LoadBalancerNames": [
                    {
                        "Ref": "ClassicLoadBalancer"
                    }
                ],
                "MaxSize": {
                    "Ref": "InstanceCount"
                },
                "MinSize": {
                    "Ref": "InstanceCount"
                },
                "DesiredCapacity": {
                    "Ref": "InstanceCount"
                },
                "VPCZoneIdentifier": [
                    {
                        "Ref": "PrivateSubnet1"
                    },
                    {
                        "Ref": "PrivateSubnet2"
                    }
                ]
            }
        }
    },
    "Outputs": {
        "ServiceRoleName": {
            "Value": {
                "Ref": "CodeDeployTrustRole"
            }
        },
        "ServiceRoleARN": {
            "Value": {
                "Fn::GetAtt": [
                    "CodeDeployTrustRole",
                    "Arn"
                ]
            }
        },
        "AutoScalingGroupName": {
            "Value": {
                "Ref": "BlueGreenAutoScalingGroup"
            }
        },
        "LoadBalancerName": {
            "Value": {
                "Ref": "ClassicLoadBalancer"
            }
        }
    }
}